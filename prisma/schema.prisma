generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  roleId        Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role      Role?       @relation(fields: [roleId], references: [id])
  trips     Trip[]
  accounts  Account[]
  tripGroup TripGroup[]
  Payment   Payment[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String
  read        Boolean
  write       Boolean
  create      Boolean
  update      Boolean
  delete      Boolean
  users       User[]
}

model Budget {
  id         Int      @id @default(autoincrement())
  amount     Float
  min        Float
  max        Float
  currencyId Int
  currency   Currency @relation(fields: [currencyId], references: [id])

  trips Trip[]
}

model Currency {
  id     Int    @id @default(autoincrement())
  name   String @unique
  symbol String

  budgets     Budget[]
  PaymentPlan PaymentPlan[]
  Payment     Payment[]
}

model Destination {
  id          String   @id @default(uuid()) // Cambiado a UUID
  name        String
  description String?
  address     String?
  city        String?
  state       String?
  continent   String?
  postalCode  String?
  latitude    Float
  longitude   Float
  createdAt   DateTime @default(now())

  trips      Trip[]
  activities Activity[]
}

// Definimos los enums primero
enum TripType {
  SOLO
  FAMILIAR
  FRIENDS
  COUPLE
  BUSINESS
  GROUP
}

enum TripPriority {
  BUDGET
  DESTINATION
  COMPANY
  DATES
  EXPERIENCE
}

enum TripStatus {
  DRAFT
  PLANNING
  BOOKED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

model Trip {
  id          String       @id @default(uuid()) // Cambiado a UUID
  title       String
  description String
  createdAt   DateTime     @default(now())
  userId      String
  budgetId    Int?
  tripGroupId String?
  startDate   DateTime?
  endDate     DateTime?
  priority    TripPriority
  status      TripStatus   @default(PLANNING)
  tripType    TripType     @default(SOLO)
  budget      Budget?      @relation(fields: [budgetId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  tripGroup   TripGroup?   @relation(fields: [tripGroupId], references: [id])

  members      Member[]
  destinations Destination[]
  activities   Activity[]
  Invitation   Invitation[]
}

model Member {
  id     String @id @default(uuid())
  name   String
  email  String @unique
  roleId Int
  tripId String
  trip   Trip   @relation(fields: [tripId], references: [id])
}

model Guest {
  id         String      @id @default(uuid()) // Cambiado a UUID
  name       String
  email      String      @unique
  createdAt  DateTime    @default(now())
  invitation Invitation?
}

model Invitation {
  id         String    @id @default(uuid()) // Cambiado a UUID
  guestId    String    @unique
  tripId     String
  invitedAt  DateTime  @default(now())
  acceptedAt DateTime?
  guest      Guest     @relation(fields: [guestId], references: [id], onDelete: Cascade)
  trip       Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model Activity {
  id            String       @id @default(uuid())
  name          String
  description   String
  createdAt     DateTime     @default(now())
  startTime     DateTime?
  endTime       DateTime?
  priority      Priority     @default(Medium)
  tripId        String? // Relación opcional con un Trip
  destinationId String? // Relación opcional con un Destination
  trip          Trip?        @relation(fields: [tripId], references: [id])
  destination   Destination? @relation(fields: [destinationId], references: [id])
}

model TripGroup {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  creatorId   Int
  trips       Trip[] // Relación con múltiples Trips
  members     User[]
}

// Modelos base para planes de pago
model PaymentPlan {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  currencyId  Int
  currency    Currency  @relation(fields: [currencyId], references: [id])
  Payment     Payment[]
}

model Payment {
  id            Int           @id @default(autoincrement())
  paymentPlanId Int
  userId        String
  amount        Float
  currencyId    Int
  status        PaymentStatus @default(Pending)
  createdAt     DateTime      @default(now())
  paymentPlan   PaymentPlan   @relation(fields: [paymentPlanId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  currency      Currency      @relation(fields: [currencyId], references: [id])
}

enum PaymentStatus {
  Pending
  Completed
  Failed
}

enum Priority {
  Low
  Medium
  High
}
