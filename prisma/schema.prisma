generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique @db.VarChar(30)
  password      String?   @db.VarChar(100)
  name          String?   @db.VarChar(100)
  email         String    @unique @db.VarChar(100)
  emailVerified DateTime? @map("email_verified")
  image         String?
  roleId        Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role      Role?       @relation(fields: [roleId], references: [id])
  trips     Trip[]
  accounts  Account[]
  tripGroup TripGroup[] @relation("GroupMembers")
  Payment   Payment[]
  Budget    Budget[]
  groups    TripGroup[]

  @@map("users")
}

model Account {
  userId            String
  type              String  @db.VarChar(30)
  provider          String  @db.VarChar(50)
  providerAccountId String  @db.VarChar(100)
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(50)
  description String  @db.VarChar(255)
  read        Boolean
  write       Boolean
  create      Boolean
  update      Boolean
  delete      Boolean
  users       User[]
}

model Budget {
  id         Int      @id @default(autoincrement())
  amount     Float
  min        Float
  max        Float
  currencyId Int
  userId     String
  currency   Currency @relation(fields: [currencyId], references: [id])

  user User   @relation(fields: [userId], references: [id])
  Trip Trip[]

  @@index([userId]) // Índice en userId para consultas rápidas
}

model Currency {
  id     Int    @id @default(autoincrement())
  name   String @unique @db.VarChar(50)
  symbol String @db.VarChar(10)

  budgets     Budget[]
  PaymentPlan PaymentPlan[]
  Payment     Payment[]
}

model Destiny {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  description String?
  placeId     String?  @unique
  address     String?  @db.VarChar(255)
  city        String?  @db.VarChar(100)
  state       String?  @db.VarChar(100)
  country     String?  @db.VarChar(100)
  countryCode String?  @db.VarChar(10)
  continent   String?  @db.VarChar(50)
  latitude    Float
  longitude   Float
  createdAt   DateTime @default(now())

  trips      Trip[]
  activities Activity[]

  @@index([city, state, country]) // Índice en city, state, country para consultas geográficas
}

enum TripType {
  SOLO
  FAMILIAR
  FRIENDS
  COUPLE
  BUSINESS
  GROUP
}

enum TripPriority {
  BUDGET
  DESTINY
  COMPANY
  DATES
  EXPERIENCE
}

enum TripStatus {
  DRAFT
  PLANNING
  BOOKED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

model Trip {
  id            String       @id @default(uuid())
  title         String       @db.VarChar(255)
  description   String
  createdAt     DateTime     @default(now())
  userId        String
  budgetId      Int?
  tripGroupId   String?
  startDate     DateTime?
  endDate       DateTime?
  priority      TripPriority
  status        TripStatus   @default(PLANNING)
  tripType      TripType     @default(SOLO)
  shareableLink String? // Campo para compartir enlace
  qrCode        String? // Campo opcional para almacenar el código QR

  budget    Budget?    @relation(fields: [budgetId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
  tripGroup TripGroup? @relation(fields: [tripGroupId], references: [id])

  members    Member[]
  destinies  Destiny[]
  activities Activity[]
  Invitation Invitation[]

  @@index([startDate, endDate]) // Índices en fechas de inicio y fin para consultas rápidas
}

model Member {
  id     String @id @default(uuid())
  name   String @db.VarChar(100)
  email  String @unique @db.VarChar(100)
  roleId Int
  tripId String
  trip   Trip   @relation(fields: [tripId], references: [id])

  @@index([email]) // Índice en email
}

model Guest {
  id         String      @id @default(uuid())
  name       String      @db.VarChar(100)
  email      String      @unique @db.VarChar(100)
  createdAt  DateTime    @default(now())
  invitation Invitation?
}

model Invitation {
  id         String    @id @default(uuid())
  guestId    String    @unique
  tripId     String
  invitedAt  DateTime  @default(now())
  acceptedAt DateTime?
  guest      Guest     @relation(fields: [guestId], references: [id], onDelete: Cascade)
  trip       Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model Activity {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(255)
  description String
  createdAt   DateTime  @default(now())
  startTime   DateTime?
  endTime     DateTime?
  priority    Priority  @default(Medium)
  tripId      String? // Relación opcional con un Trip
  destinyId   String? // Relación opcional con un Destiny
  trip        Trip[]
  destiny     Destiny[]

  @@index([startTime, endTime]) // Índice en tiempos de inicio y fin
}

model TripGroup {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(100)
  description String
  createdAt   DateTime @default(now())
  userId      String
  trips       Trip[]
  members     User[]   @relation("GroupMembers")
  user        User     @relation(fields: [userId], references: [id])
}

model PaymentPlan {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  description String    @db.VarChar(255)
  price       Float
  currencyId  Int
  currency    Currency  @relation(fields: [currencyId], references: [id])
  Payment     Payment[]
}

model Payment {
  id            Int           @id @default(autoincrement())
  paymentPlanId Int
  userId        String
  amount        Float
  currencyId    Int
  status        PaymentStatus @default(Pending)
  createdAt     DateTime      @default(now())
  paymentPlan   PaymentPlan   @relation(fields: [paymentPlanId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  currency      Currency      @relation(fields: [currencyId], references: [id])

  @@index([status]) // Índice en status para búsquedas rápidas de pagos
}

enum PaymentStatus {
  Pending
  Completed
  Failed
}

enum Priority {
  Low
  Medium
  High
}
